type NoteConnection implements Connection {
    edges: [NoteEdge!]!
    pageInfo: PageInfo!
}

type NoteEdge implements Edge {
    cursor: String!
    node: Note!
}

input SortNotes {
    direction: SortDirection!
    by: SortNotesBy!
}

enum SortNotesBy {
    CREATED_DATE
    MODIFIED_DATE
}

input SortDeletedNotes {
    direction: SortDirection!
    by: SortDeletedNotesBy!
}

enum SortDeletedNotesBy {
    DELETED_DATE
}

type Note implements Node {
    noteId: ID!
    createdAt: AWSDateTime!
    modifiedAt: AWSDateTime!
    title: String
    content: String!
    labels: [Label!]!
}

input CreateNoteInput {
    title: String
    content: String!
    labels: [AddLabelInput!]
}

type CreateNoteOutput {
    note: Note!
}

input AddLabelToNoteInput {
    noteId: ID!
    label: AddLabelInput!
}

type AddLabelToNoteOutput {
    note: Note!
}

input RemoveLabelFromNoteInput {
    noteId: ID!
    labelId: ID!
}

type RemoveLabelFromNoteOutput {
    note: Note!
}

input UpdateNoteInput {
    noteId: ID!
    title: String
    content: String
}

type UpdateNoteOutput {
    note: Note!
}

input DeleteNoteInput {
    noteId: ID!
}

type DeleteNoteOutput {
    success: Boolean!
}

input ArchiveNoteInput {
    noteId: ID!
}

type ArchiveNoteOutput {
    note: Note!
}

input UnArchiveNoteInput {
    noteId: ID!
}

type UnArchiveNoteOutput {
    note: Note!
}

type Query {
    note(noteId: ID!): Note
    notes(first: Int!, after: String, sort: SortNotes!): NoteConnection!
    archives(first: Int!, after: String, sort: SortNotes!): NoteConnection!
    deletedNotes(first: Int!, after: String, sort: SortDeletedNotes!): NoteConnection!
}

type Mutation {
    createNote(input: CreateNoteInput!): CreateNoteOutput!
    addLabelToNote(input: AddLabelToNoteInput!): AddLabelToNoteOutput!
    removeLabelFromNote(input: RemoveLabelFromNoteInput!): RemoveLabelFromNoteOutput!
    updateNote(input: UpdateNoteInput!): UpdateNoteOutput!
    deleteNote(input: DeleteNoteInput!): DeleteNoteOutput!
    archiveNote(input: ArchiveNoteInput!): ArchiveNoteOutput!
    unArchiveNote(input: UnArchiveNoteInput!): UnArchiveNoteOutput!
}